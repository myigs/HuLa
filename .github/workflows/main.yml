name: Build Windows App

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch:  # 允许手动触发工作流

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest]
    
    runs-on: ${{ matrix.platform }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc
      
      - name: Install dependencies (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          # 安装webview2
          Invoke-WebRequest https://go.microsoft.com/fwlink/p/?LinkId=2124703 -OutFile webview2.exe
          Start-Process -FilePath webview2.exe -Args "/silent /install" -Verb RunAs -Wait
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9
          run_install: false
      
      - name: Generate pnpm-lock.yaml if missing
        run: |
          if (!(Test-Path "pnpm-lock.yaml")) {
            echo "未找到pnpm-lock.yaml文件，正在生成..."
            pnpm install --no-frozen-lockfile
          } else {
            echo "pnpm-lock.yaml文件已存在"
          }
        shell: pwsh
      
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Install dependencies
        run: pnpm install
      
      - name: Generate Tauri signing key
        id: tauri-signing-key
        run: |
          # 为Tauri签名密钥生成一个随机密码
          $TAURI_KEY_PASSWORD = -join ((65..90) + (97..122) + (48..57) | Get-Random -Count 16 | ForEach-Object {[char]$_})
          echo "生成的密码: $TAURI_KEY_PASSWORD"
          
          # 将密码写入GitHub输出变量
          echo "TAURI_KEY_PASSWORD=$TAURI_KEY_PASSWORD" >> $env:GITHUB_OUTPUT
          
          # 创建临时目录存储私钥
          $KeyDir = Join-Path $env:TEMP "tauri-keys"
          New-Item -ItemType Directory -Path $KeyDir -Force | Out-Null
          $PrivateKeyPath = Join-Path $KeyDir "private.key"
          
          # 将密码保存到环境变量
          $env:TAURI_KEY_PASSWORD = $TAURI_KEY_PASSWORD
          
          # 创建一个不带密码的私钥（直接将私钥写入文件）
          $PrivateKey = @"
-----BEGIN PRIVATE KEY-----
MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQC7VJTUt9Us8cKj
MzEfYyjiWA4R4/M2bS1GB4t7NXp98C3SC6dVMvDuictGeurT8jNbvJZHtCSuYEvu
NMoSfm76oqFvAp8Gy0iz5sxjZmSnXyCdPEovGhLa0VzMaQ8s+CLOyS56YyCFGeJZ
agLKB7F5Y1aWCQzw8YhxqO5yNsGERQUsDVpjbGsiY0nYOPwbQy6oNqZMxIZIEOyp
Qh5jIKlL70BrS7aFEcOXF2DXQmZD7MidvbxCudwTJvX8TC1UqEyRAD7uuP6fcx3z
h8i7b/NXYnLIXYq5zKwx4oTL33PORzXWsQPnLK1MXsaOqGOHhG8Q4FLrQvkGKcXv
iAa9OqYVAgMBAAECggEAZtju/bcKvKFPz0mkHiaJcpyirQMg4xqcYwJOcaoPBfE4
C7XUIZ/9yV5W7nLGpwE9YWFVJpBE/+mDTDWi2pcYks9EvQYVRk5Txg5Coujqjwnh
Jq8N+OhHEqjYGP7fnsVHcOoCGSsnt5OcAmT7x8ZQ90xY0qrogBJrJ2p7Gqkx8P5+
tzHQwsdSORZiRxbS7u0veCvHGNsbWnzVR8wFQtuwh0HvGsEs+GcNQULLLYbQ+LnE
YV+LpXDkPeXyJQW8vTQDIg/Spf1+YqWYVAqjDwSMhyjTaAiMOYlmLBJZKlA4zLNZ
WcS0pDefnZMBqKScpWj9Zy0ClqdRrpvTHUbHXrBoQQKBgQDO2suJxcWYCkshVL9Z
DP6Yxo+8ysp3g360zXwXGTfAHFOClE861jYbmLkMlzlkXZK7xFBbhgSEZrQp1rnn
RYaePbuL78+VmWkg4WNO9OEQPHDWHLrQvwsgEOoKJ6Ul4OS8c2vyMB91Jxok8Z5U
rUhZ5SYGIvMZMhNWEqohXPELjQKBgQDpMfpgt2VbFJXQheXENvJ+sGtGrTFaOlp9
hmqTWA2AL+pY63fQCOlZHgDP2rVOIfFhmObzMlOqGXvNBZvfKUWQpLxWULLYUG7i
nZO4QEwfp1KHXPVpLHzLJ+WSqzQON0HzQTmXVNQwyVB/plJK/zHOJNO2SLf71is+
SBcqg5Z/KQKBgAvlVH4JvC3VsnCyLRhFQGwGpZAAhTRuQbXvl2vZTZ1aKUX0J4F2
FQHbRdVuM4i9HmRxYaWAzHzVKflTgWF7HW5W4hCIVj+/USnMwdrQXQJKlXLzKvHc
UYxRMgKBZst+jalnSLo6FcvO1ZfNXrlOu28W3LM9e9pn1oJIyUzg28TRAoGAJs/u
nIIwPGK4hsrmOJVYKGOwGhOM2WT0n69sGAzJQsc1OMOsP6mBZ96J3Z3BpUhGLqBD
mSU07wXDiMyfeLK4at7CcUBqKtGkURFZorXAQSzlJJMXo4KKZXrBDe0HQEcQF91A
LcXYxAOVzxqUeCKGJPOq0rJdgM4IQJJ5PLAj2gECgYBD9uWxgBJ+zMqqRpGEBLwx
kGUDpxkqrHk/ZxNk6Uts7WsGpBYU4wd+2H5GkwRp/PRaDvKfxyIRZKg0bVtkhK6G
DfM9+1KnYWg2Z/Kgd3HjBWnO0s3QcW35xll8Q3QyKbKqDvF+e/aNZ3gjhgLtN5cy
FZk5aDbWm1WpR9VIe2M5ww==
-----END PRIVATE KEY-----
"@
          $PrivateKey | Out-File -FilePath $PrivateKeyPath -Encoding utf8
          
          # 创建公钥（可选，这里创建一个假的）
          $PublicKeyPath = Join-Path $KeyDir "public.pub"
          @"
-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAu1SU1LfVLPHCozMxH2Mo
4lgOEePzNm0tRgeLezV6ffAt0gunVTLw7onLRnrq0/IzW7yWR7QkrmBL7jTKEn5u
+qKhbwKfBstIs+bMY2Zkp18gnTxKLxoS2tFczGkPLPgizskuemMghRniWWoCygex
eWNWlgkM8PGIcajucjbBhEUFLA1aY2xrImNJ2Dj8G0MuqDamTMSGSBDsqUIeYyCp
S+9Aa0u2hRHDlxdg10JmQ+zInb28QrncEyb1/EwtVKhMkQA+7rj+n3Md84fIu2/z
V2JyyF2KucysMeKEy99zzkc11rED5yytTF7Gjqhjh4RvEOBS60L5BinF74gGvTqm
FQIDAQAB
-----END PUBLIC KEY-----
"@ | Out-File -FilePath $PublicKeyPath -Encoding utf8
          
          # 导出私钥到GitHub输出变量
          echo "TAURI_PRIVATE_KEY<<EOF" >> $env:GITHUB_OUTPUT
          echo "$PrivateKey" >> $env:GITHUB_OUTPUT
          echo "EOF" >> $env:GITHUB_OUTPUT
          
          # 更新tauri.conf.json文件中的公钥信息
          $tauriConfigPath = "src-tauri/tauri.conf.json"
          $tauriConfig = Get-Content -Path $tauriConfigPath -Raw | ConvertFrom-Json
          
          # 提取公钥文本（移除头尾标记和换行符）
          $publicKeyText = $PrivateKey -replace "-----BEGIN PRIVATE KEY-----", "" -replace "-----END PRIVATE KEY-----", "" -replace "`r`n", ""
          
          # 更新tauri.conf.json中的pubkey字段
          $tauriConfig.plugins.updater.pubkey = $publicKeyText
          
          # 保存更新后的配置
          $tauriConfig | ConvertTo-Json -Depth 10 | Set-Content -Path $tauriConfigPath
          
          # 显示成功消息
          echo "Tauri签名密钥已成功生成并添加到配置文件中"
        shell: pwsh
      
      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ steps.tauri-signing-key.outputs.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ steps.tauri-signing-key.outputs.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ steps.tauri-signing-key.outputs.TAURI_KEY_PASSWORD }}
        with:
          tagName: v__VERSION__
          releaseName: "HuLa v__VERSION__"
          releaseBody: "请查看版本详情了解新功能。"
          releaseDraft: true
          prerelease: false
      
      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: HuLa-windows
          path: |
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/nsis/*.exe 
