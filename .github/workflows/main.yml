name: Build Windows App

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch:  # 允许手动触发工作流

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest]
    
    runs-on: ${{ matrix.platform }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc
      
      - name: Install dependencies (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          # 安装webview2
          Invoke-WebRequest https://go.microsoft.com/fwlink/p/?LinkId=2124703 -OutFile webview2.exe
          Start-Process -FilePath webview2.exe -Args "/silent /install" -Verb RunAs -Wait
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9
          run_install: false
      
      - name: Generate pnpm-lock.yaml if missing
        run: |
          if (!(Test-Path "pnpm-lock.yaml")) {
            echo "未找到pnpm-lock.yaml文件，正在生成..."
            pnpm install --no-frozen-lockfile
          } else {
            echo "pnpm-lock.yaml文件已存在"
          }
        shell: pwsh
      
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Install dependencies
        run: pnpm install
      
      - name: Completely disable updater and signing
        run: |
          # 修改tauri.conf.json文件
          $tauriConfigPath = "src-tauri/tauri.conf.json"
          if (Test-Path $tauriConfigPath) {
            echo "开始修改tauri.conf.json以禁用updater..."
            $configJson = Get-Content -Raw $tauriConfigPath
            $config = $configJson | ConvertFrom-Json
            
            # 完全移除plugins.updater部分
            if ($config.plugins.PSObject.Properties.Name -contains "updater") {
              $config.plugins.PSObject.Properties.Remove("updater")
              echo "已完全移除updater配置"
            } else {
              echo "未找到updater配置"
            }
            
            # 将修改后的配置写回文件
            $config | ConvertTo-Json -Depth 20 | Set-Content $tauriConfigPath
            echo "已更新tauri.conf.json文件"
            
            # 显示修改后的配置
            Get-Content $tauriConfigPath
          } else {
            echo "错误：未找到tauri.conf.json文件"
            exit 1
          }
        shell: pwsh
      
      - name: Build Tauri app
        run: |
          # 设置环境变量忽略签名错误
          $env:TAURI_SIGNING_PRIVATE_KEY_IGNORE = "true"
          pnpm tauri build
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # 这里不再需要签名相关的环境变量
      
      - name: List build artifacts
        run: |
          echo "列出构建产物："
          Get-ChildItem -Path "src-tauri/target/release/bundle" -Recurse -Include *.msi,*.exe
        shell: pwsh
      
      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: HuLa-windows
          path: |
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/nsis/*.exe 
