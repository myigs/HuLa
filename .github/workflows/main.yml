name: Build Windows App

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch:  # 允许手动触发工作流

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest]
    
    runs-on: ${{ matrix.platform }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc
      
      - name: Install dependencies (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          # 安装webview2
          Invoke-WebRequest https://go.microsoft.com/fwlink/p/?LinkId=2124703 -OutFile webview2.exe
          Start-Process -FilePath webview2.exe -Args "/silent /install" -Verb RunAs -Wait
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9
          run_install: false
      
      - name: Generate pnpm-lock.yaml if missing
        run: |
          if (!(Test-Path "pnpm-lock.yaml")) {
            echo "未找到pnpm-lock.yaml文件，正在生成..."
            pnpm install --no-frozen-lockfile
          } else {
            echo "pnpm-lock.yaml文件已存在"
          }
        shell: pwsh
      
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Install dependencies
        run: pnpm install
      
      - name: Generate Tauri signing key
        id: tauri-signing-key
        run: |
          # 为Tauri签名密钥生成一个随机密码
          $TAURI_KEY_PASSWORD = -join ((65..90) + (97..122) + (48..57) | Get-Random -Count 16 | ForEach-Object {[char]$_})
          echo "生成的密码: $TAURI_KEY_PASSWORD"
          
          # 将密码写入GitHub输出变量
          echo "TAURI_KEY_PASSWORD=$TAURI_KEY_PASSWORD" >> $env:GITHUB_OUTPUT
          
          # 生成Tauri签名密钥
          $env:TAURI_KEY_PASSWORD = $TAURI_KEY_PASSWORD
          
          # 创建一个临时文件存储密钥
          $PRIVATE_KEY_FILE = "$env:TEMP\tauri_private_key.txt"
          
          # 运行tauri signer命令并记录输出
          $output = pnpm tauri signer generate -w "$TAURI_KEY_PASSWORD" 2>&1
          echo "Tauri signer output: $output"
          
          # 从输出中提取私钥文件路径
          $privateKeyPath = $output | Select-String -Pattern "Private: (.+) \(Keep it secret\)" | ForEach-Object { $_.Matches.Groups[1].Value }
          
          if (-not $privateKeyPath -or -not (Test-Path $privateKeyPath)) {
            echo "错误：未能找到生成的私钥文件路径: $privateKeyPath"
            exit 1
          }
          
          echo "找到私钥文件: $privateKeyPath"
          
          # 导出私钥到环境变量
          $TAURI_PRIVATE_KEY = Get-Content -Path $privateKeyPath -Raw
          
          # 使用多行输出格式保存私钥
          echo 'TAURI_PRIVATE_KEY<<EOF' >> $env:GITHUB_OUTPUT
          echo "$TAURI_PRIVATE_KEY" >> $env:GITHUB_OUTPUT
          echo 'EOF' >> $env:GITHUB_OUTPUT
          
          # 显示消息表示密钥已生成
          echo "Tauri签名密钥已成功生成并添加到配置文件中"
        shell: pwsh
      
      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ steps.tauri-signing-key.outputs.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ steps.tauri-signing-key.outputs.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ steps.tauri-signing-key.outputs.TAURI_KEY_PASSWORD }}
        with:
          tagName: v__VERSION__
          releaseName: "HuLa v__VERSION__"
          releaseBody: "请查看版本详情了解新功能。"
          releaseDraft: true
          prerelease: false
      
      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: HuLa-windows
          path: |
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/nsis/*.exe 
